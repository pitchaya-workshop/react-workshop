{"version":3,"sources":["Config.js","Listtask/Listtask.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["config","apiUrl","Listtask","props","useState","listtaskname","setListtaskname","datachange","setDatachange","checkedit","setCheckedit","checkeditid","setCheckeditid","editvalue","setEditvalue","useEffect","axios","get","then","data","catch","error","console","log","reloadList","className","map","list","key","id","Checkbox","onChange","event","taskstyle","document","getElementById","target","checked","replace","HandleCheck","TextField","style","flex","autoFocus","variant","value","taskName","onKeyPress","put","taskname","updateTaskname","Button","onClick","datalist","todoid","window","confirm","delete","Home","setTaskname","reload","setReload","placeholder","fullWidth","post","e","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ac4970a6.chunk.js","sourcesContent":["const config = {\r\n    apiUrl:'http://localhost:4300'\r\n}\r\nexport default config","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Checkbox, Button } from '@material-ui/core';\r\nimport './Listtask.css'\r\nimport config from '../Config'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst Listtask = (props) => {\r\n    const [listtaskname, setListtaskname] = useState([])\r\n    const [datachange, setDatachange] = useState(false)\r\n    const [checkedit, setCheckedit] = useState(false)\r\n    const [checkeditid, setCheckeditid] = useState()\r\n    const [editvalue, setEditvalue] = useState([])\r\n    useEffect(() => {\r\n        axios.get(`${config.apiUrl}/todo`)\r\n            .then(({ data }) => {\r\n                setListtaskname(data)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }, [props.reloadList, datachange])\r\n    const HandleCheck = (event, list) => {\r\n        let taskstyle = document.getElementById(`task${list.id}`)\r\n        if (event.target.checked == true) {\r\n            taskstyle.className += 'finishTask'\r\n        } else {\r\n            taskstyle.className = taskstyle.className.replace('finishTask', '')\r\n        }\r\n    }\r\n    const HandleClickDelete = (data) => {\r\n        console.log(data);\r\n        if (window.confirm(\"ConFirm Delete\")) {\r\n            axios.delete(`${config.apiUrl}/delete/${data.id}`)\r\n                .then((data) => {\r\n                    setDatachange(!datachange)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                })\r\n        }\r\n    }\r\n    const HandleClickEdit = (datalist) => {\r\n        axios.get(`${config.apiUrl}/todo/${datalist.id}`)\r\n            .then((todoid) => {\r\n                setEditvalue({\r\n                    id: todoid.data[0].id,\r\n                    taskName: todoid.data[0].taskName\r\n                })\r\n                setCheckedit(true)\r\n                setCheckeditid(datalist.id)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n\r\n    }\r\n    const updateTaskname = (event) =>{\r\n        if(event.key === \"Enter\"){\r\n            axios.put(`${config.apiUrl}/updatetodo`,{\r\n                id:editvalue.id,\r\n                taskname:editvalue.taskName\r\n            })\r\n            .then((data)=>{\r\n                setCheckedit(false)\r\n                setDatachange(!datachange)\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n            })\r\n        }\r\n    }   \r\n    return (\r\n        <ul className=\"list-group\">\r\n            {\r\n                listtaskname.map(list => (\r\n                    <li className=\"list-group-item d-flex  align-items-center\" key={list.id}>\r\n                        <Checkbox className=\"checkboxColor\" onChange={event => HandleCheck(event, list)} />\r\n                        {\r\n                            checkedit == true && checkeditid == list.id ?\r\n                                <TextField\r\n                                    style={{ flex: '1' }}\r\n                                    autoFocus\r\n                                    variant=\"outlined\"\r\n                                    value={editvalue.taskName || ''}\r\n                                    onChange={event => setEditvalue({ ...editvalue, taskName: event.target.value })}\r\n                                    onKeyPress={event => updateTaskname(event)}\r\n                                /> :\r\n                                <span style={{ flex: '1' }} id={`task${list.id}`} >{list.taskName}</span>\r\n                        }\r\n                        <span >\r\n                            <Button onClick={event => HandleClickEdit(list)}>\r\n                                <EditIcon />\r\n                            </Button>\r\n                            <Button onClick={event => HandleClickDelete(list)}>\r\n                                <DeleteIcon />\r\n                            </Button>\r\n                        </span>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Listtask\r\n","import React, { useState } from 'react'\r\nimport './Home.css'\r\nimport Listtask from '../Listtask/Listtask';\r\nimport axios from 'axios'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport config from '../Config'\r\nconst Home = () => {\r\n    const [taskname, setTaskname] = useState('')\r\n    const [reload, setReload] = useState(false)\r\n    const HandleSubmit = (event) => {\r\n        if (event.key === 'Enter') {\r\n            axios.post(`${config.apiUrl}/addTodo`, {\r\n                taskname: taskname\r\n            })\r\n                .then((data) => {\r\n                    setReload(!reload)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                })\r\n            setTaskname('')\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"todoBox p-3\">\r\n            <div className=\"d-block text-center p-3\">\r\n                <h1 className=\"titleFont\">My Todo</h1>\r\n            </div>\r\n            <div className=\"mb-4\">\r\n                <TextField\r\n                    placeholder=\"Input task name then tap Enter to add\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    variant=\"outlined\"\r\n                    value={taskname}\r\n                    onKeyPress={HandleSubmit}\r\n                    onChange={e => setTaskname(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"listBox\">\r\n                <Listtask reloadList={reload} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home'\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}